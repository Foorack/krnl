const fn __module(path:&'static str)->Option<&'static str>{#[allow(unused_variables)]let path=path.as_bytes();{let module_path="compute_benchmarks::krnl_backend::kernels".as_bytes();if path.len()==module_path.len()+"::module".len(){let success=path[0]==module_path[0]&&path[1]==module_path[1]&&path[2]==module_path[2]&&path[3]==module_path[3]&&path[4]==module_path[4]&&path[5]==module_path[5]&&path[6]==module_path[6]&&path[7]==module_path[7]&&path[8]==module_path[8]&&path[9]==module_path[9]&&path[10]==module_path[10]&&path[11]==module_path[11]&&path[12]==module_path[12]&&path[13]==module_path[13]&&path[14]==module_path[14]&&path[15]==module_path[15]&&path[16]==module_path[16]&&path[17]==module_path[17]&&path[18]==module_path[18]&&path[19]==module_path[19]&&path[20]==module_path[20]&&path[21]==module_path[21]&&path[22]==module_path[22]&&path[23]==module_path[23]&&path[24]==module_path[24]&&path[25]==module_path[25]&&path[26]==module_path[26]&&path[27]==module_path[27]&&path[28]==module_path[28]&&path[29]==module_path[29]&&path[30]==module_path[30]&&path[31]==module_path[31]&&path[32]==module_path[32]&&path[33]==module_path[33]&&path[34]==module_path[34]&&path[35]==module_path[35]&&path[36]==module_path[36]&&path[37]==module_path[37]&&path[38]==module_path[38]&&path[39]==module_path[39]&&path[40]==module_path[40];if success{return Some("(dependencies(\"\\\"krnl-core\\\" = { path = \\\"/home/charles/Documents/rust/krnl/krnl-core\\\" }\")) => (#[cfg(not(target_arch = \"spirv\"))] use krnl :: krnl_core ; use krnl_core ::\nkernel ; #[kernel(threads(128), for_each)] pub fn\nsaxpy(#[item] x : & f32, #[push] alpha : f32, #[item] y : & mut f32)\n{ * y += alpha * * x ; })");}}}None}pub(super)const fn __kernel(path:&'static str)->Option<(u64,&'static[u32],Features)>{#[allow(unused_variables)]let path=path.as_bytes();{let kernel_path="compute_benchmarks::krnl_backend::kernels::saxpy".as_bytes();let kernel_spirv=&[119734787,66816,983040,80,0,131089,1,131089,5345,393227,67,1280527431,1685353262,808793134,0,196622,0,3,655375,5,1,1852399981,0,2,3,4,5,6,393232,1,17,128,1,1,327685,2,1651469415,1767861345,100,262149,3,1970238055,29552,196613,4,7495544,262149,5,2003984249,0,327685,6,1752397168,1852793695,7566451,262215,7,6,4,327752,8,0,35,0,262215,2,11,28,262215,3,11,24,196679,9,2,327752,9,0,35,0,262215,4,34,0,262215,4,33,0,262215,5,34,0,262215,5,33,1,196679,10,2,327752,10,0,35,0,196679,4,24,327752,10,1,35,4,327752,10,2,35,8,327752,10,3,35,12,196630,11,32,262176,12,9,11,262176,13,12,11,196637,7,11,262165,15,32,0,262187,15,16,0,131091,17,262167,18,15,3,196638,8,11,196641,20,17,262176,21,1,18,262203,21,2,1,262203,21,3,1,196638,9,7,262176,22,12,9,262203,22,4,12,262203,22,5,12,393246,10,8,15,15,15,262176,23,9,10,262203,23,6,9,262187,15,24,128,131092,25,262165,68,32,1,262176,69,9,15,262187,68,70,2,262187,68,72,1,262187,68,76,3,327734,17,1,0,20,131320,27,262205,18,28,2,262205,18,29,3,327745,69,71,6,70,262205,15,31,71,393281,12,34,6,16,16,262205,11,35,34,327761,15,36,28,0,327761,15,37,29,0,327812,15,38,37,24,131321,40,131320,40,458997,15,41,36,27,42,43,262390,51,43,0,131321,47,131320,47,327856,25,48,41,31,196855,50,0,262394,48,50,51,131320,50,327745,69,73,6,72,262205,15,74,73,327808,15,75,41,74,393281,13,52,4,16,75,327745,69,77,6,76,262205,15,78,77,327808,15,79,41,78,393281,13,53,5,16,79,262205,11,54,52,262205,11,56,53,524300,11,57,67,50,35,54,56,196670,53,57,327808,15,42,41,38,131321,43,131320,43,131321,40,131320,51,65789,65592];let features=Features::new();if path.len()==kernel_path.len(){let success=path[0]==kernel_path[0]&&path[1]==kernel_path[1]&&path[2]==kernel_path[2]&&path[3]==kernel_path[3]&&path[4]==kernel_path[4]&&path[5]==kernel_path[5]&&path[6]==kernel_path[6]&&path[7]==kernel_path[7]&&path[8]==kernel_path[8]&&path[9]==kernel_path[9]&&path[10]==kernel_path[10]&&path[11]==kernel_path[11]&&path[12]==kernel_path[12]&&path[13]==kernel_path[13]&&path[14]==kernel_path[14]&&path[15]==kernel_path[15]&&path[16]==kernel_path[16]&&path[17]==kernel_path[17]&&path[18]==kernel_path[18]&&path[19]==kernel_path[19]&&path[20]==kernel_path[20]&&path[21]==kernel_path[21]&&path[22]==kernel_path[22]&&path[23]==kernel_path[23]&&path[24]==kernel_path[24]&&path[25]==kernel_path[25]&&path[26]==kernel_path[26]&&path[27]==kernel_path[27]&&path[28]==kernel_path[28]&&path[29]==kernel_path[29]&&path[30]==kernel_path[30]&&path[31]==kernel_path[31]&&path[32]==kernel_path[32]&&path[33]==kernel_path[33]&&path[34]==kernel_path[34]&&path[35]==kernel_path[35]&&path[36]==kernel_path[36]&&path[37]==kernel_path[37]&&path[38]==kernel_path[38]&&path[39]==kernel_path[39]&&path[40]==kernel_path[40]&&path[41]==kernel_path[41]&&path[42]==kernel_path[42]&&path[43]==kernel_path[43]&&path[44]==kernel_path[44]&&path[45]==kernel_path[45]&&path[46]==kernel_path[46]&&path[47]==kernel_path[47];if success{return Some((9143436443785369139u64,kernel_spirv,features));}}}None}