const fn __module (path : & 'static str) -> Option < & 'static str > { let path = path . as_bytes () ; { let module_path = "krnlc_test::bar::foo" . as_bytes () ; if path . len () == module_path . len () + "::module" . len () { let success = path [0usize] == module_path [0usize] && path [1usize] == module_path [1usize] && path [2usize] == module_path [2usize] && path [3usize] == module_path [3usize] && path [4usize] == module_path [4usize] && path [5usize] == module_path [5usize] && path [6usize] == module_path [6usize] && path [7usize] == module_path [7usize] && path [8usize] == module_path [8usize] && path [9usize] == module_path [9usize] && path [10usize] == module_path [10usize] && path [11usize] == module_path [11usize] && path [12usize] == module_path [12usize] && path [13usize] == module_path [13usize] && path [14usize] == module_path [14usize] && path [15usize] == module_path [15usize] && path [16usize] == module_path [16usize] && path [17usize] == module_path [17usize] && path [18usize] == module_path [18usize] && path [19usize] == module_path [19usize] ; if success { return Some ("(dependencies(\"spirv-std = { git = \\\"https://github.com/EmbarkStudios/rust-gpu\\\", rev = \\\"9e2e66729d440fdbf53ce21d173b683240aa2805\\\" }\")) => (#[cfg(target_arch = \"spirv\")] #[allow(dead_code)]\n#[spirv(compute(threads(1)))] pub fn\nbaz(#[spirv(storage_buffer, descriptor_set = 0, binding = 0)] y : & mut [u32])\n{ y [0] = 1 ; })") ; } } } None }