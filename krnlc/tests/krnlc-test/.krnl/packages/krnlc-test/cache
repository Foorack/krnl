const fn __module (path : & 'static str) -> Option < & 'static str > { # [allow (unused_variables)] let path = path . as_bytes () ; { let module_path = "krnlc_test::foo" . as_bytes () ; if path . len () == module_path . len () + "::module" . len () { let success = path [0usize] == module_path [0usize] && path [1usize] == module_path [1usize] && path [2usize] == module_path [2usize] && path [3usize] == module_path [3usize] && path [4usize] == module_path [4usize] && path [5usize] == module_path [5usize] && path [6usize] == module_path [6usize] && path [7usize] == module_path [7usize] && path [8usize] == module_path [8usize] && path [9usize] == module_path [9usize] && path [10usize] == module_path [10usize] && path [11usize] == module_path [11usize] && path [12usize] == module_path [12usize] && path [13usize] == module_path [13usize] && path [14usize] == module_path [14usize] ; if success { return Some ("(dependencies(\"\\\"krnl-core\\\" = { path = \\\"/home/charles/Documents/rust/krnl/krnl-core\\\" }\")) => (#[cfg(not(target_arch = \"spirv\"))] use krnl :: krnl_core ; use krnl_core ::\nkernel ; #[cfg(target_arch = \"spirv\")] use krnl_core :: mem :: UnsafeMut ;\n#[kernel(threads(256))] pub fn\nbar(#[builtin] global_index : u32, #[global] y : & mut UnsafeMut < [u32] >,\n#[push] x : u32) { unsafe { y.unsafe_mut() [global_index as usize] = x ; } }\n#[kernel(threads(256), for_each)] pub fn\nbar_for_each(#[item] y : & mut u32, #[push] x : u32) { * y = x ; })") ; } } } None } pub (super) const fn __kernel (path : & 'static str) -> Option < (u64 , & 'static [u32] , Features) > { # [allow (unused_variables)] let path = path . as_bytes () ; { let kernel_path = "krnlc_test::foo::bar" . as_bytes () ; let kernel_spirv = & [119734787u32 , 66816u32 , 983040u32 , 59u32 , 0u32 , 131089u32 , 1u32 , 131089u32 , 5345u32 , 196622u32 , 0u32 , 3u32 , 589839u32 , 5u32 , 1u32 , 1852399981u32 , 0u32 , 2u32 , 4u32 , 5u32 , 6u32 , 393232u32 , 1u32 , 17u32 , 256u32 , 1u32 , 1u32 , 327685u32 , 2u32 , 1970238055u32 , 1684627312u32 , 0u32 , 393221u32 , 4u32 , 1701996660u32 , 1767859297u32 , 2019910766u32 , 0u32 , 262149u32 , 5u32 , 2003984249u32 , 0u32 , 327685u32 , 6u32 , 1752397168u32 , 1852793695u32 , 7566451u32 , 262215u32 , 7u32 , 6u32 , 4u32 , 327752u32 , 8u32 , 0u32 , 35u32 , 0u32 , 262215u32 , 2u32 , 11u32 , 26u32 , 262215u32 , 4u32 , 11u32 , 29u32 , 196679u32 , 9u32 , 2u32 , 327752u32 , 9u32 , 0u32 , 35u32 , 0u32 , 262215u32 , 5u32 , 34u32 , 0u32 , 262215u32 , 5u32 , 33u32 , 0u32 , 196679u32 , 10u32 , 2u32 , 327752u32 , 10u32 , 0u32 , 35u32 , 0u32 , 327752u32 , 10u32 , 1u32 , 35u32 , 4u32 , 327752u32 , 10u32 , 2u32 , 35u32 , 8u32 , 262165u32 , 11u32 , 32u32 , 0u32 , 262176u32 , 12u32 , 1u32 , 11u32 , 262176u32 , 13u32 , 9u32 , 11u32 , 262176u32 , 14u32 , 12u32 , 11u32 , 196637u32 , 7u32 , 11u32 , 262187u32 , 11u32 , 16u32 , 0u32 , 131091u32 , 17u32 , 262167u32 , 18u32 , 11u32 , 3u32 , 196638u32 , 8u32 , 11u32 , 196641u32 , 20u32 , 17u32 , 262176u32 , 21u32 , 1u32 , 18u32 , 262203u32 , 21u32 , 2u32 , 1u32 , 262203u32 , 12u32 , 4u32 , 1u32 , 196638u32 , 9u32 , 7u32 , 262176u32 , 22u32 , 12u32 , 9u32 , 262203u32 , 22u32 , 5u32 , 12u32 , 327710u32 , 10u32 , 8u32 , 11u32 , 11u32 , 262176u32 , 23u32 , 9u32 , 10u32 , 262203u32 , 23u32 , 6u32 , 9u32 , 262187u32 , 11u32 , 24u32 , 256u32 , 131092u32 , 25u32 , 262165u32 , 52u32 , 32u32 , 1u32 , 262187u32 , 52u32 , 53u32 , 2u32 , 262187u32 , 52u32 , 55u32 , 1u32 , 327734u32 , 17u32 , 1u32 , 0u32 , 20u32 , 131320u32 , 27u32 , 196855u32 , 50u32 , 0u32 , 196859u32 , 16u32 , 51u32 , 131320u32 , 51u32 , 262205u32 , 18u32 , 28u32 , 2u32 , 262205u32 , 11u32 , 30u32 , 4u32 , 327745u32 , 13u32 , 54u32 , 6u32 , 53u32 , 262205u32 , 11u32 , 32u32 , 54u32 , 393281u32 , 13u32 , 34u32 , 6u32 , 16u32 , 16u32 , 262205u32 , 11u32 , 35u32 , 34u32 , 327761u32 , 11u32 , 36u32 , 28u32 , 0u32 , 327812u32 , 11u32 , 37u32 , 36u32 , 24u32 , 327808u32 , 11u32 , 38u32 , 37u32 , 30u32 , 327856u32 , 25u32 , 39u32 , 38u32 , 32u32 , 196855u32 , 40u32 , 0u32 , 262394u32 , 39u32 , 41u32 , 42u32 , 131320u32 , 42u32 , 131321u32 , 50u32 , 131320u32 , 41u32 , 327745u32 , 13u32 , 56u32 , 6u32 , 55u32 , 262205u32 , 11u32 , 57u32 , 56u32 , 327808u32 , 11u32 , 58u32 , 38u32 , 57u32 , 393281u32 , 14u32 , 43u32 , 5u32 , 16u32 , 58u32 , 196670u32 , 43u32 , 35u32 , 131321u32 , 50u32 , 131320u32 , 40u32 , 65791u32 , 131320u32 , 50u32 , 65789u32 , 65592u32] ; let features = Features :: new () ; if path . len () == kernel_path . len () { let success = path [0usize] == kernel_path [0usize] && path [1usize] == kernel_path [1usize] && path [2usize] == kernel_path [2usize] && path [3usize] == kernel_path [3usize] && path [4usize] == kernel_path [4usize] && path [5usize] == kernel_path [5usize] && path [6usize] == kernel_path [6usize] && path [7usize] == kernel_path [7usize] && path [8usize] == kernel_path [8usize] && path [9usize] == kernel_path [9usize] && path [10usize] == kernel_path [10usize] && path [11usize] == kernel_path [11usize] && path [12usize] == kernel_path [12usize] && path [13usize] == kernel_path [13usize] && path [14usize] == kernel_path [14usize] && path [15usize] == kernel_path [15usize] && path [16usize] == kernel_path [16usize] && path [17usize] == kernel_path [17usize] && path [18usize] == kernel_path [18usize] && path [19usize] == kernel_path [19usize] ; if success { return Some ((20603231025256416u64 , kernel_spirv , features)) ; } } } { let kernel_path = "krnlc_test::foo::bar_for_each" . as_bytes () ; let kernel_spirv = & [119734787u32 , 66816u32 , 983040u32 , 57u32 , 0u32 , 131089u32 , 1u32 , 131089u32 , 5345u32 , 196622u32 , 0u32 , 3u32 , 589839u32 , 5u32 , 1u32 , 1852399981u32 , 0u32 , 2u32 , 3u32 , 4u32 , 5u32 , 393232u32 , 1u32 , 17u32 , 256u32 , 1u32 , 1u32 , 262149u32 , 3u32 , 1970238055u32 , 29552u32 , 262149u32 , 4u32 , 2003984249u32 , 0u32 , 327685u32 , 5u32 , 1752397168u32 , 1852793695u32 , 7566451u32 , 327685u32 , 2u32 , 1651469415u32 , 1767861345u32 , 100u32 , 262215u32 , 6u32 , 6u32 , 4u32 , 327752u32 , 7u32 , 0u32 , 35u32 , 0u32 , 262215u32 , 3u32 , 11u32 , 24u32 , 196679u32 , 8u32 , 2u32 , 327752u32 , 8u32 , 0u32 , 35u32 , 0u32 , 262215u32 , 4u32 , 34u32 , 0u32 , 262215u32 , 4u32 , 33u32 , 0u32 , 196679u32 , 9u32 , 2u32 , 327752u32 , 9u32 , 0u32 , 35u32 , 0u32 , 262215u32 , 2u32 , 11u32 , 28u32 , 327752u32 , 9u32 , 1u32 , 35u32 , 4u32 , 327752u32 , 9u32 , 2u32 , 35u32 , 8u32 , 262165u32 , 10u32 , 32u32 , 0u32 , 262176u32 , 11u32 , 9u32 , 10u32 , 262176u32 , 12u32 , 12u32 , 10u32 , 196637u32 , 6u32 , 10u32 , 262187u32 , 10u32 , 14u32 , 0u32 , 131091u32 , 15u32 , 262167u32 , 16u32 , 10u32 , 3u32 , 196638u32 , 7u32 , 10u32 , 196641u32 , 18u32 , 15u32 , 262176u32 , 19u32 , 1u32 , 16u32 , 262203u32 , 19u32 , 3u32 , 1u32 , 196638u32 , 8u32 , 6u32 , 262176u32 , 20u32 , 12u32 , 8u32 , 262203u32 , 20u32 , 4u32 , 12u32 , 327710u32 , 9u32 , 7u32 , 10u32 , 10u32 , 262176u32 , 21u32 , 9u32 , 9u32 , 262203u32 , 21u32 , 5u32 , 9u32 , 262203u32 , 19u32 , 2u32 , 1u32 , 262187u32 , 10u32 , 22u32 , 256u32 , 131092u32 , 23u32 , 262165u32 , 50u32 , 32u32 , 1u32 , 262187u32 , 50u32 , 51u32 , 2u32 , 262187u32 , 50u32 , 53u32 , 1u32 , 327734u32 , 15u32 , 1u32 , 0u32 , 18u32 , 131320u32 , 25u32 , 262205u32 , 16u32 , 26u32 , 2u32 , 262205u32 , 16u32 , 27u32 , 3u32 , 327745u32 , 11u32 , 52u32 , 5u32 , 51u32 , 262205u32 , 10u32 , 29u32 , 52u32 , 393281u32 , 11u32 , 31u32 , 5u32 , 14u32 , 14u32 , 262205u32 , 10u32 , 32u32 , 31u32 , 327761u32 , 10u32 , 33u32 , 26u32 , 0u32 , 327761u32 , 10u32 , 34u32 , 27u32 , 0u32 , 327812u32 , 10u32 , 35u32 , 34u32 , 22u32 , 131321u32 , 37u32 , 131320u32 , 37u32 , 458997u32 , 10u32 , 38u32 , 33u32 , 25u32 , 39u32 , 40u32 , 262390u32 , 48u32 , 40u32 , 0u32 , 131321u32 , 44u32 , 131320u32 , 44u32 , 327856u32 , 23u32 , 45u32 , 38u32 , 29u32 , 196855u32 , 47u32 , 0u32 , 262394u32 , 45u32 , 47u32 , 48u32 , 131320u32 , 47u32 , 327745u32 , 11u32 , 54u32 , 5u32 , 53u32 , 262205u32 , 10u32 , 55u32 , 54u32 , 327808u32 , 10u32 , 56u32 , 38u32 , 55u32 , 393281u32 , 12u32 , 49u32 , 4u32 , 14u32 , 56u32 , 196670u32 , 49u32 , 32u32 , 327808u32 , 10u32 , 39u32 , 38u32 , 35u32 , 131321u32 , 40u32 , 131320u32 , 40u32 , 131321u32 , 37u32 , 131320u32 , 48u32 , 65789u32 , 65592u32] ; let features = Features :: new () ; if path . len () == kernel_path . len () { let success = path [0usize] == kernel_path [0usize] && path [1usize] == kernel_path [1usize] && path [2usize] == kernel_path [2usize] && path [3usize] == kernel_path [3usize] && path [4usize] == kernel_path [4usize] && path [5usize] == kernel_path [5usize] && path [6usize] == kernel_path [6usize] && path [7usize] == kernel_path [7usize] && path [8usize] == kernel_path [8usize] && path [9usize] == kernel_path [9usize] && path [10usize] == kernel_path [10usize] && path [11usize] == kernel_path [11usize] && path [12usize] == kernel_path [12usize] && path [13usize] == kernel_path [13usize] && path [14usize] == kernel_path [14usize] && path [15usize] == kernel_path [15usize] && path [16usize] == kernel_path [16usize] && path [17usize] == kernel_path [17usize] && path [18usize] == kernel_path [18usize] && path [19usize] == kernel_path [19usize] && path [20usize] == kernel_path [20usize] && path [21usize] == kernel_path [21usize] && path [22usize] == kernel_path [22usize] && path [23usize] == kernel_path [23usize] && path [24usize] == kernel_path [24usize] && path [25usize] == kernel_path [25usize] && path [26usize] == kernel_path [26usize] && path [27usize] == kernel_path [27usize] && path [28usize] == kernel_path [28usize] ; if success { return Some ((3443493447619518447u64 , kernel_spirv , features)) ; } } } None }