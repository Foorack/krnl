const fn __module (path : & 'static str) -> Option < & 'static str > { # [allow (unused_variables)] let path = path . as_bytes () ; { let module_path = "krnlc_test::foo" . as_bytes () ; if path . len () == module_path . len () + "::module" . len () { let success = path [0usize] == module_path [0usize] && path [1usize] == module_path [1usize] && path [2usize] == module_path [2usize] && path [3usize] == module_path [3usize] && path [4usize] == module_path [4usize] && path [5usize] == module_path [5usize] && path [6usize] == module_path [6usize] && path [7usize] == module_path [7usize] && path [8usize] == module_path [8usize] && path [9usize] == module_path [9usize] && path [10usize] == module_path [10usize] && path [11usize] == module_path [11usize] && path [12usize] == module_path [12usize] && path [13usize] == module_path [13usize] && path [14usize] == module_path [14usize] ; if success { return Some ("(dependencies(\"\\\"krnl-core\\\" = { path = \\\"/home/charles/Documents/rust/krnl/krnl-core\\\" }\")) => (#[cfg(not(target_arch = \"spirv\"))] use krnl :: krnl_core ; use krnl_core ::\nkernel ; #[cfg(target_arch = \"spirv\")] use krnl_core :: mem :: UnsafeMut ;\n#[kernel(threads(1))] pub fn bar(#[global] y : & mut UnsafeMut < [u32] >)\n{ unsafe { y.unsafe_mut() [0] = 1 ; } })") ; } } } None } pub (super) const fn __kernel (path : & 'static str) -> Option < (u64 , & 'static [u32] , :: krnl :: device :: Features) > { # [allow (unused_variables)] let path = path . as_bytes () ; { let kernel_path = "krnlc_test::foo::bar" . as_bytes () ; let kernel_spirv = & [119734787u32 , 66816u32 , 983040u32 , 41u32 , 0u32 , 131089u32 , 1u32 , 131089u32 , 5345u32 , 196622u32 , 0u32 , 3u32 , 458767u32 , 5u32 , 1u32 , 1852399981u32 , 0u32 , 2u32 , 35u32 , 393232u32 , 1u32 , 17u32 , 1u32 , 1u32 , 1u32 , 262149u32 , 2u32 , 2003984249u32 , 0u32 , 262215u32 , 3u32 , 6u32 , 4u32 , 196679u32 , 4u32 , 2u32 , 327752u32 , 4u32 , 0u32 , 35u32 , 0u32 , 262215u32 , 2u32 , 34u32 , 0u32 , 262215u32 , 2u32 , 33u32 , 0u32 , 196679u32 , 33u32 , 2u32 , 327752u32 , 33u32 , 0u32 , 35u32 , 0u32 , 327752u32 , 33u32 , 1u32 , 35u32 , 4u32 , 131091u32 , 5u32 , 262165u32 , 6u32 , 32u32 , 0u32 , 196637u32 , 3u32 , 6u32 , 196641u32 , 8u32 , 5u32 , 196638u32 , 4u32 , 3u32 , 262176u32 , 9u32 , 12u32 , 4u32 , 262187u32 , 6u32 , 10u32 , 0u32 , 262203u32 , 9u32 , 2u32 , 12u32 , 131092u32 , 11u32 , 262176u32 , 12u32 , 12u32 , 6u32 , 262187u32 , 6u32 , 13u32 , 1u32 , 262165u32 , 31u32 , 32u32 , 1u32 , 262176u32 , 32u32 , 9u32 , 6u32 , 262174u32 , 33u32 , 6u32 , 6u32 , 262176u32 , 34u32 , 9u32 , 33u32 , 262203u32 , 34u32 , 35u32 , 9u32 , 262187u32 , 31u32 , 36u32 , 1u32 , 262187u32 , 31u32 , 38u32 , 0u32 , 327734u32 , 5u32 , 1u32 , 0u32 , 8u32 , 131320u32 , 15u32 , 196855u32 , 29u32 , 0u32 , 196859u32 , 10u32 , 30u32 , 131320u32 , 30u32 , 327745u32 , 32u32 , 37u32 , 35u32 , 36u32 , 262205u32 , 6u32 , 17u32 , 37u32 , 327856u32 , 11u32 , 18u32 , 10u32 , 17u32 , 196855u32 , 19u32 , 0u32 , 262394u32 , 18u32 , 20u32 , 21u32 , 131320u32 , 21u32 , 131321u32 , 29u32 , 131320u32 , 20u32 , 327745u32 , 32u32 , 39u32 , 35u32 , 38u32 , 262205u32 , 6u32 , 40u32 , 39u32 , 393281u32 , 12u32 , 22u32 , 2u32 , 10u32 , 40u32 , 196670u32 , 22u32 , 13u32 , 131321u32 , 29u32 , 131320u32 , 19u32 , 65791u32 , 131320u32 , 29u32 , 65789u32 , 65592u32] ; let features = :: krnl :: device :: Features :: new () ; if path . len () == kernel_path . len () { let success = path [0usize] == kernel_path [0usize] && path [1usize] == kernel_path [1usize] && path [2usize] == kernel_path [2usize] && path [3usize] == kernel_path [3usize] && path [4usize] == kernel_path [4usize] && path [5usize] == kernel_path [5usize] && path [6usize] == kernel_path [6usize] && path [7usize] == kernel_path [7usize] && path [8usize] == kernel_path [8usize] && path [9usize] == kernel_path [9usize] && path [10usize] == kernel_path [10usize] && path [11usize] == kernel_path [11usize] && path [12usize] == kernel_path [12usize] && path [13usize] == kernel_path [13usize] && path [14usize] == kernel_path [14usize] && path [15usize] == kernel_path [15usize] && path [16usize] == kernel_path [16usize] && path [17usize] == kernel_path [17usize] && path [18usize] == kernel_path [18usize] && path [19usize] == kernel_path [19usize] ; if success { return Some ((13750936922876889840u64 , kernel_spirv , features)) ; } } } None }